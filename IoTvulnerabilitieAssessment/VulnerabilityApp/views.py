from django.shortcuts import render

# Views for home page
def home(request):
    return render(request, 'home.html')

# Views for about page 
def about(request):
    return render(request, 'about.html')



# Views for service page 
def service(request):
    return render(request, 'service.html')

#Views for result page
def result(request):
    return render(request, 'result.html')



def predict_vulnerability(request):
    vulnerability = None
    vulnerability_name = None
    mitigation_framework = None

    if request.method == 'POST':
        vendor = request.POST.get('vendor')
        device_type = request.POST.get('device_type')
        manufacturer = request.POST.get('manufacturer')
        cve_id = request.POST.get('cve_id')
        base_score = request.POST.get('base_score')

        # Perform prediction based on the provided features
        vulnerability_name, mitigation_framework = predict_vulnerability_type(vendor, device_type, manufacturer, cve_id, base_score)

    return render(request, 'prediction.html', {'vulnerability_name': vulnerability_name, 'mitigation_framework': mitigation_framework})


# Define a dictionary mapping vulnerability indices to names
vulnerability_names = {
    1: 'Blind Command Injection in Trend Micro InterScan Messaging Security (Virtual Appliance)',
    2: 'Trend Micro InterScan Messaging Security (Virtual Appliance) Multiple Vulnerabilities',
    3: 'Replay attacks',
    4: 'Command injection vulnerability',
    5: 'Denial of Service (DoS) via a crafted Zigbee message.',
    6: "Unacceptable temperature within the target device's physical environment",
    7: 'Unauthorized access via a DNS rebinding attack',
    8: 'Does not restrict access to the API',
    9: 'Missing encryption in the RFID tag',
    10: 'Lose of configuration in information about the Zigbee network and current brightness level',
    11: 'Cross-site scripting',
    12: 'Cleartext Transmission of Sensitive Information',
    13: 'Missing encryption',
    14: 'Use of Default Credentials',
    15: 'Incorrect Session Management and Credential Re-use',
    16: 'Unlock a device via code replay attack.',
    17: 'Incorrect permissions in the Bluetooth Services',
    18: 'Lack of lock protection',
    19: 'Improper authorization vulnerability',
    20: 'Improper authentication vulnerability',
    21: 'Improper authentication vulnerability ',
    22: 'Information disclosure vulnerability ',
    23: 'Information disclosure vulnerability',
    24: 'Versions earlier than VOGUE-AL00A 9.1.0.193(C00E190R1P12)',
    25: 'Insufficient authentication vulnerability',
    26: 'Do not properly block guest access',
    27: 'Inclusion of sensitive information in log files vulnerability',
    28: 'Insecure storage of sensitive information vulnerability',
    29: 'Authentication bypass in website post requests',
    30: 'Factory Reset Protection (FRP) bypass security vulnerability',
    31: 'Lock-screen bypass vulnerability',
    32: 'Activation lock bypass vulnerability.',
    33: 'Lock pattern change vulnerability',
    34: 'Does not verify SSL certificates',
    35: 'Does not properly implement the locked state',
    36: 'Information leak vulnerability ',
}

# Dictionary containing vulnerability names and their corresponding mitigation frameworks
mitigation_frameworks = {
    1: 'Implement input validation and parameterized queries to prevent command injection attacks. Use web application firewalls (WAFs) to filter and sanitize user inputs.',
    2: 'Regularly update the software to the latest patched version provided by the vendor. Implement network segmentation to isolate vulnerable systems from critical infrastructure.',
    3: 'Use secure communication protocols like TLS/SSL to encrypt data in transit. Implement random session tokens and nonce values to prevent replay attacks.',
    4: 'Sanitize user inputs and avoid using user-controlled data in command execution. Enforce least privilege principles to restrict system commands that can be executed.',
    5: 'Implement rate limiting and request throttling to mitigate the impact of DoS attacks. Use intrusion detection systems (IDS) to detect and block malicious Zigbee traffic.',
    6: 'Implement temperature monitoring and alerting mechanisms. Use smart thermostat devices that automatically adjust temperature settings based on predefined thresholds.',
    7: 'Implement DNS pinning to prevent DNS rebinding attacks. Validate and enforce DNS resolution for internal resources. Implement strong authentication mechanisms for DNS requests.',
    8: 'Implement access control mechanisms such as OAuth2 or API keys to restrict access to authorized users only. Implement proper authentication and authorization checks for API endpoints.',
    9: 'Implement strong encryption algorithms such as AES for RFID tag data. Use secure key management practices to protect encryption keys from unauthorized access.',
    10: 'Implement backup and restore mechanisms for configuration data. Use secure communication protocols like Zigbee with strong encryption to prevent eavesdropping and tampering.',
    11: 'Implement input validation and output encoding to mitigate XSS vulnerabilities. Use Content Security Policy (CSP) to prevent malicious scripts from executing in the browser.',
    12: 'Use encryption algorithms like AES to encrypt sensitive information before transmission. Implement secure communication channels such as HTTPS to protect data in transit.',
    13: 'Use strong encryption algorithms like AES to encrypt sensitive data at rest. Implement proper key management practices to protect encryption keys from unauthorized access.',
    14: 'Ensure default credentials are changed during device setup. Implement strong password policies and multifactor authentication (MFA) to prevent unauthorized access.',
    15: 'Implement session expiration and reauthentication mechanisms to prevent session hijacking. Use secure session management practices such as storing session IDs securely.',
    16: 'Implement replay attack detection mechanisms such as session token expiration and one-time use tokens. Use secure communication channels like TLS/SSL to prevent interception of replayed codes.',
    17: 'Review and update Bluetooth service permissions to ensure only necessary permissions are granted. Implement encryption and authentication mechanisms for Bluetooth communication.',
    18: 'Implement physical lock mechanisms or biometric authentication for device access. Use tamper-evident seals to detect unauthorized access attempts.',
    19: 'Implement role-based access control (RBAC) to enforce proper authorization levels for users. Regularly review and update access control policies to align with security requirements.',
    20: 'Implement strong authentication mechanisms such as multi-factor authentication (MFA) or biometric authentication. Enforce password complexity requirements and regular password rotations.',
    21: 'Implement secure authentication protocols like OAuth2 or OpenID Connect. Use secure communication channels such as HTTPS to protect authentication credentials during transmission.',
    22: 'Implement access controls to restrict access to sensitive information. Regularly review and update access control policies to prevent unauthorized disclosure of information.',
    23: 'Implement encryption for sensitive information stored in databases or files. Use strong encryption algorithms like AES and implement proper key management practices.',
    24: 'Update to the latest firmware version provided by the vendor. Implement regular security updates and patches to address known vulnerabilities in the software.',
    25: 'Implement strong authentication mechanisms such as multi-factor authentication (MFA) to prevent unauthorized access. Enforce proper credential management and password policies.',
    26: 'Implement guest network isolation to restrict access to internal resources. Use network access controls (NAC) to authenticate and authorize guest devices on the network.',
    27: 'Ensure sensitive information is redacted or obfuscated in log files. Implement access controls to restrict access to log files and monitor for unauthorized access attempts.',
    28: 'Implement encryption for sensitive data stored on devices or in storage systems. Use strong encryption algorithms like AES and implement proper key management practices.',
    29: 'Implement proper input validation and output encoding to prevent injection attacks. Use parameterized queries or stored procedures to interact with the database.',
    30: 'Implement secure boot mechanisms to prevent unauthorized modifications to firmware. Use device attestation techniques to verify the integrity of firmware during boot-up.',
    31: 'Implement lock screen timeout policies and enforce screen locking mechanisms. Use biometric authentication or PIN/password requirements to unlock devices.',
    32: 'Implement activation lock mechanisms to prevent unauthorized device activation or reset. Use secure authentication protocols and unique device identifiers for activation.',
    33: 'Implement lock pattern timeout policies and enforce pattern complexity requirements. Educate users on the importance of choosing secure lock patterns.',
    34: 'Ensure SSL certificates are properly configured and validated. Use certificate pinning to prevent man-in-the-middle attacks and ensure secure communication channels.',
    35: 'Implement proper state management mechanisms to maintain device lock state. Use secure authentication mechanisms and enforce timeouts for idle sessions.',
    36: 'Implement data encryption for sensitive information stored on devices or transmitted over the network. Use secure communication protocols like TLS/SSL to protect data in transit.',
}

def predict_vulnerability_type(vendor, device_type, manufacturer, cve_id, base_score):
    # Mapping of features to vulnerabilities
    features_to_vulnerabilities = {
        ('Bosch', 'Smart Camera', 'Android', 'CVE-2019-7729', 'Low'): 1,
        ('Bosch', 'Smart Camera', 'Android', 'CVE-2019-7728', 'High'): 2,
        ('Meross', 'Smart Thermostat', 'Meross', 'CVE-2023-46892', 'High'): 3,
        ('Trane & Pivot Thermostat', 'Smart Thermostat', 'Trane & Pivot Thermostat', 'CVE-2023-4212', 'Medium'): 4,
        ('Pearl Thermostat', 'Smart Thermostat', 'Pearl Thermostat', 'CVE-2023-24678', 'High'): 5,
        ('Sinilink XY-WFT1 WiFi Remote Thermostat', 'Smart Thermostat', 'Sinilink XY-WFT1 WiFi Remote Thermostat', 'CVE-2022-43704', 'Medium'): 6,
        ('Not specified', 'Smart Thermostat', 'Radio Thermostat CT50 and CT80', 'CVE-2018-11315', 'Medium'): 7,
        ('Not specified', 'Smart Thermostat', 'Radio Thermostat CT80 And CT50', 'CVE-2013-4860', 'High'): 8,
        ('Not available', 'Smart Thermostat', 'Radio Thermostat CT80 And CT50', 'CVE-2013-4860', 'High'): 9,
        ('Not specified', 'Smart Light bulb', 'TRADFRI bulb', 'CVE-2022-39064', 'High'): 10,
        ('Mitsubishi', 'Smart Refrigerator', 'Electric consumer electronics', 'CVE-2022-33322', 'Medium'): 11,
        ('Mitsubishi', 'Smart Refrigerator', 'Electric consumer electronics', 'CVE-2022-33321', 'Critical'): 12,
        ('Not specified', 'Smart Lock', 'Flient Smart Door Lock v1.0', 'CVE-2023-50129', 'Medium'): 13,
        ('Not specified', 'Smart Lock', 'Flient Smart Door Lock v1.0', 'CVE-2023-50124', 'Medium'): 14,
        ('Not specified', 'Smart Lock', 'Ultraloq UL3 2nd Gen Smart Lock Firmware 02.27.0012', 'CVE-2022-46480', 'High'): 15,
        ('Not specified', 'Smart Lock', 'Suleve 5-in-1 Smart Door Lock v1.0', 'CVE-2023-39843', 'Low'): 16,
        ('Not specified', 'Smart Lock', 'Etekcity 3-in-1 Smart Door Lock v1.0', 'CVE-2023-39841', 'Medium'): 17,
        ('Not specified', 'Smart Lock', 'WAFU Keyless Smart Lock v1.0', 'CVE-2023-34553', 'Medium'): 18,
        ('Not specified', 'Smart Lock', 'Fortessa FTBTLD Smart Lock', 'CVE-2021-44905', 'High'): 19,
        ('Huawei', 'Smart Lock', 'Taurus-AL00B', 'CVE-2020-9237', 'Medium'): 20,
        ('Huawei', 'Smart Lock', 'HUAWEI Mate 20', 'CVE-2020-1807', 'Low'): 21,
        ('Huawei', 'Smart Lock', 'Smartphones', 'CVE-2020-1794', 'Medium'): 22,
        ('Huawei', 'Smart Lock', 'HUAWEI Mate 20', 'CVE-2020-1787', 'Medium'): 23,
        ('Huawei', 'Smart Lock', 'Huawei smartphones', 'CVE-2019-5252', 'Low'): 24,
        ('Huawei', 'Smart Lock', 'Huawei smartphones', 'CVE-2019-5264', 'Medium'): 25,
        ('Huawei', 'Smart Lock', 'Honor play smartphones', 'CVE-2019-5309', 'Medium'): 26,
        ('Honor V20', 'Smart Lock', 'Honor V20 smartphone whith Versions earlier than ELLE-AL00B 9.1.0.193(C00E190R1P21)', 'CVE-2019-5228', 'High'): 27,
        ('Honor play', 'Smart Lock', 'Honor play smartphones with versions earlier than Cornell-AL00A 9.1.0.321(C00E320R1P1T8)', 'CVE-2019-5213', 'Low'): 28,
        ('Not specified', 'Smart Lock', 'Glue Smart Lock', 'CVE-2019-12944', 'High'): 29,
        ('Belwith Products', 'Smart Lock', 'Hickory Smart for Android devices', 'CVE-2019-5634', 'Medium'): 30,
        ('Belwith Products', 'Smart Lock', 'Hickory Smart for iOS mobile devices', 'CVE-2019-5633', 'Medium'): 31,
        ('Tzumi Electronics', 'Smart Lock', 'Tzumi Electronics Klic Lock application 1.0.9 for mobile devices', 'CVE-2019-11334', 'Low'): 32,
        ('Huawei', 'Smart Lock', 'Mate 9 Pro Huawei smartphones versions earlier than LON-AL00B9.0.1.150 (C00E61R1P8T8)', 'CVE-2019-5217', 'Medium'): 33,
        ('Huawei', 'Smart Lock', 'P20 Huawei smart phones versions before Emily-AL00A 9.0.0.167(C00E81R1P21T8)', 'CVE-2019-5306', 'Medium'): 34,
        ('Huawei', 'Smart Lock', 'Huawei smartphones Emily-AL00A The versions before 8.1.0.171(C00)', 'CVE-2018-7925', 'Medium'): 35,
        ('Huawei', 'Smart Lock', 'Huawei Mate 10 pro smartphones with the versions before BLA-AL00B 8.1.0.326(C00)', 'CVE-2018-7989', 'Medium'): 36,
        ('Huawei', 'Smart Lock', 'Huawei Mate RS smartphones with the versions before NEO-AL00D 8.1.0.167(C786)', 'CVE-2018-7929', 'Medium'): 37,
        ('Huawei', 'Smart Lock', 'Huawei Mate 9 Pro Smartphones with software of LON-AL00BC00B139D; LON-AL00BC00B229', 'CVE-2017-17326', 'Medium'): 38,
        ('Huawei', 'Smart Lock', 'Huawei HiWallet App with the versions before 8.0.4', 'CVE-2017-17149', 'Low'): 39,
        ('Akerun', 'Smart Lock', 'Smart Lock Robot App for iOS before 1.2.4', 'CVE-2016-1148', 'High'): 40,
        ('Apple', 'Smart Lock', 'Apple iOS before 5.0.1', 'CVE-2011-3440', 'Not available'): 41,
        ('Hauwei', 'Smart Speaker', 'Huawei smart speaker Myna', 'CVE-2019-5271', 'Medium'): 42,
    }

    # Find vulnerability based on features
    vulnerability_index = features_to_vulnerabilities.get((vendor, device_type, manufacturer, cve_id, base_score))
    if vulnerability_index:
        vulnerability_name = vulnerability_names.get(vulnerability_index)
        mitigation_framework = mitigation_frameworks.get(vulnerability_index)
        return vulnerability_name, mitigation_framework
    else:
        return "Vulnerability not found", "Mitigation framework not available"

